name: buildstore_enterprise

trigger:
  branches:
    include:
      - master

variables:
  - name: env
    value: dev
  - name: slnPath
    value: ./BuildStoreEnterprise.sln
  - name: nameProjectBase
    value: BuildStoreEnterprise.WebApp.MVC
  - name: projPath
    value: ./src/web/BuildStoreEnterprise.WebApp.MVC/BuildStoreEnterprise.WebApp.MVC.csproj
  - name: folderSavePublish
    value: buildstore_enterprise
  - name: uriServerFtp
    value: $(FTP_URI)
  - name: userServerFtp
    value: $(FTP_USERNAME)
  - name: passServerFtp
    value: $(FTP_PASSWORD)

stages:
- stage: BuildAndPublish
  displayName: Compilar e Publicar Aplicações
  jobs:
  - job: Build
    displayName: Build & FTP
    pool:
      name: BuildStorePipelines

    steps:
    - checkout: self

    - task: UseDotNet@2
      displayName: "Instalar .NET SDK 9.x"
      inputs:
        packageType: 'sdk'
        version: '9.0.x'

    - task: DotNetCoreCLI@2
      displayName: "Compilar Solução"
      inputs:
        command: 'build'
        projects: '$(slnPath)'
        arguments: '--configuration Release'

    - task: PowerShell@2
      displayName: "Publicar Projeto MVC"
      inputs:
        targetType: inline
        script: |
          dotnet publish $(projPath) `
            --configuration Release `
            --output $(Build.ArtifactStagingDirectory)/$(nameProjectBase)

    # Se tiver APIs em src/services, compila e publica:
    - task: PowerShell@2
      displayName: "Publicar APIs em src/services"
      inputs:
        targetType: inline
        script: |
          $servicesPath = "$(System.DefaultWorkingDirectory)/src/services"
          $outputBase   = "$(Build.ArtifactStagingDirectory)/services"
          Get-ChildItem $servicesPath -Recurse -Filter *.csproj |
            ForEach-Object {
              $name = Split-Path $_.DirectoryName -Leaf
              dotnet publish $_.FullName `
                --configuration Release `
                --output "$outputBase/$name"
            }
